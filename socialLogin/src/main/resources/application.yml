server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/security?serverTimezone=Asia/Seoul
    username: cos
    password: cos1234

  mvc:
    view:
      prefix: /templates/
      suffix: .mustache

  jpa:
    hibernate:
      ddl-auto: update #create update none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true

  security:
    oauth2:
      client:
        registration:
          google: # /oauth2/authorization/google 이 주소를 동작하게 한다.
            client-id: 머시기
            client-secret: 머시기
            scope:
              - email
              - profile

          facebook:
            client-id: 머시기
            client-secret: 머시기
            scope:
              - email
              - public_profile

          # 네이버는 OAuth2.0 공식 지원대상이 아니라서 provider 설정이 필요하다.
          # 요청주소도 다르고, 응답 데이터도 다르기 때문이다.
          naver:
            client-id: 머시기
            client-secret: 머시기
            scope:
              - name
              - email
              - profile_image
            client-name: Naver # 클라이언트 네임은 구글 페이스북도 대문자로 시작하더라.
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원정보를 json의 response 키값으로 리턴해줌.




## 신규
#spring:
#  profiles.active: local
#  # 데이터 소스 설정
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/oauth_login_tutorial?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
#    username: root
#    password: root
#    hikari:
#      pool-name: jpa-hikari-pool
#      maximum-pool-size: 5
#      jdbc-url: ${spring.datasource.url}
#      username: ${spring.datasource.username}
#      password: ${spring.datasource.password}
#      driver-class-name: ${spring.datasource.driver-class-name}
#      data-source-properties:
#        rewriteBatchedStatements: true
#  # JPA 설정
#  jpa:
#    generate-ddl: true
#    hibernate:
#      ddl-auto: update
#    show-sql: true
#    properties:
#      hibernate:
#        dialect: org.hibernate.dialect.MySQL8Dialect
#        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
#        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
#        default_batch_fetch_size: ${chunkSize:100}
#        jdbc.batch_size: 20
#        order_inserts: true
#        order_updates: true
#        format_sql: true
#  # Security OAuth
#  security:
#    oauth2.client:
#      registration:
#        google:
#          clientId: '{구글 client-id}'
#          clientSecret: '{구글 client-secret}'
#          scope:
#            - email
#            - profile
#        facebook:
#          clientId: '{페이스북 client-id}'
#          clientSecret: '{페이스북 client-secret}'
#          scope:
#            - email
#            - public_profile
#        naver:
#          clientId: '{네이버 client-id}'
#          clientSecret: '{네이버 client-secret}'
#          clientAuthenticationMethod: post
#          authorizationGrantType: authorization_code
#          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
#          scope:
#            - nickname
#            - email
#            - profile_image
#          clientName: Naver
#        kakao:
#          clientId: '{카카오 client-id}'
#          clientSecret: '{카카오 client-secret}'
#          clientAuthenticationMethod: post
#          authorizationGrantType: authorization_code
#          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
#          scope:
#            - profile_nickname
#            - profile_image
#            - account_email
#          clientName: Kakao
#      # Provider 설정
#      provider:
#        naver:
#          authorizationUri: https://nid.naver.com/oauth2.0/authorize
#          tokenUri: https://nid.naver.com/oauth2.0/token
#          userInfoUri: https://openapi.naver.com/v1/nid/me
#          userNameAttribute: response
#        kakao:
#          authorizationUri: https://kauth.kakao.com/oauth/authorize
#          tokenUri: https://kauth.kakao.com/oauth/token
#          userInfoUri: https://kapi.kakao.com/v2/user/me
#          userNameAttribute: id
#
## cors 설정
#cors:
#  allowed-origins: 'http://localhost:3000'
#  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
#  allowed-headers: '*'
#  max-age: 3600
#
## jwt secret key 설정
#jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOds'
#
## 토큰 관련 secret Key 및 RedirectUri 설정
#app:
#  auth:
#    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
#    tokenExpiry: 1800000
#    refreshTokenExpiry: 604800000
#  oauth2:
#    authorizedRedirectUris:
#      - http://localhost:3000/oauth/redirect